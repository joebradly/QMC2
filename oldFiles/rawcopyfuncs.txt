Walker* QMC::clone_walker(const Walker* parent) const {

    Walker* clone = new Walker(n_p, dim);
    
    for (int i = 0; i < n_p; i++) {
        
        clone->r2(i) = parent->r2(i);

        for (int j = 0; j < dim; j++) {
            clone->r(i, j) = parent->r(i, j);
        }

        for (int j = i + 1; j < n_p; j++) {
            clone->r_rel(i, j) = clone->r_rel(j, i) = parent->r_rel(i, j);
        }
    }
    
    clone->ressurect();

    sampling->copy_walker(parent, clone);
    
    return clone;

}


void Importance::copy_walker(const Walker* parent, Walker* child) const {

    qmc->get_kinetics_ptr()->copy_walker_IS(parent, child);

    for (int i = 0; i < n_p; i++) {
        for (int j = 0; j < dim; j++) {
            child->qforce(i, j) = parent->qforce(i, j);
        }
    }

}

void Closed_form::copy_walker_IS(const Walker* parent, Walker* child) const {

    for (int i = 0; i < n_p; i++) {
        for (int j = 0; j < dim; j++) {
            child->jast_grad(i, j) = parent->jast_grad(i, j);
            child->spatial_grad(i, j) = parent->spatial_grad(i, j);
        }
    }

    qmc->get_system_ptr()->copy_walker(parent, child);

}

void Fermions::copy_walker(const Walker* parent, Walker* child) const {
    for (int i = 0; i < n2; i++) {
        for (int j = 0; j < n_p; j++)
            child->inv(i,j) = parent->inv(i,j);
    }
}
